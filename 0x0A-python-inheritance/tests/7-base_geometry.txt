>>> class BaseGeometry:
...     """BaseGeometry class with unimplemented area method and integer validator."""
...     def area(self):
...         """Raise an error with the message 'area() is not implemented'."""
...         raise Exception("area() is not implemented")
...     def integer_validator(self, name, value):
...         """Validates value to be an integer greater than 0."""
...         if type(value) is not int:
...             raise TypeError(f"{name} must be an integer")
...         if value <= 0:
...             raise ValueError(f"{name} must be greater than 0")

>>> bg = BaseGeometry()

>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

>>> bg.integer_validator("my_int", 12)

>>> bg.integer_validator("width", 89)

>>> bg.integer_validator("name", "John")
Traceback (most recent call last):
    ...
TypeError: name must be an integer

>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("distance", -4)
Traceback (most recent call last):
    ...
ValueError: distance must be greater than 0
